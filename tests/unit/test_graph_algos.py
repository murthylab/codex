from unittest import TestCase

from src.utils.graph_algos import pathways, reachable_node_counts
from tests import TEST_NEURON_DATA_FACTORY


class TestGraphAlgos(TestCase):
    @classmethod
    def setUpClass(cls):
        cls.neuron_db = TEST_NEURON_DATA_FACTORY.get()

    def test_reachable_node_counts(self):
        num_cells = len(self.neuron_db.neuron_data)
        isets = self.neuron_db.input_sets()
        for n in sorted(self.neuron_db.neuron_data.keys())[1000:1001]:
            self.assertEqual(
                {
                    "1 hop": "7 (0%)",
                    "2 hops": "2,524 (2%)",
                    "3 hops": "28,198 (22%)",
                    "4 hops": "80,470 (65%)",
                    "5 hops": "115,793 (94%)",
                    "6 hops": "118,463 (96%)",
                    "7 hops": "118,568 (96%)",
                    "8 hops": "118,573 (96%)",
                },
                reachable_node_counts({n}, isets, num_cells),
            )

    def test_pathways(self):
        s = t = 0
        isets = self.neuron_db.input_sets()
        osets = self.neuron_db.output_sets()
        all_rids = sorted(self.neuron_db.neuron_data.keys())

        self.assertEqual(None, pathways(s, t, isets, osets))

        s = all_rids[100]
        t = all_rids[101]

        self.assertEqual(None, pathways(s, s, isets, osets))
        self.assertEqual(
            {
                720575940602943968: 0,
                720575940602964140: 5,
                720575940603498869: 1,
                720575940604372070: 2,
                720575940605189804: 2,
                720575940605344434: 2,
                720575940605355721: 4,
                720575940606042144: 2,
                720575940608760110: 2,
                720575940610948266: 2,
                720575940612780441: 1,
                720575940613200025: 2,
                720575940614963359: 3,
                720575940617296757: 2,
                720575940617619293: 1,
                720575940620555696: 2,
                720575940620747691: 2,
                720575940620860912: 1,
                720575940621331438: 2,
                720575940621626209: 1,
                720575940622137443: 4,
                720575940622800161: 2,
                720575940622859021: 2,
                720575940623512004: 1,
                720575940624687541: 2,
                720575940624695275: 3,
                720575940625460241: 2,
                720575940626027672: 1,
                720575940626280650: 1,
                720575940627158504: 1,
                720575940627341736: 2,
                720575940627996170: 2,
                720575940628091140: 1,
                720575940628684843: 2,
                720575940629040646: 2,
                720575940629497447: 1,
                720575940629517867: 3,
                720575940630715203: 3,
                720575940630896332: 1,
                720575940631427855: 1,
                720575940631562065: 3,
                720575940631876577: 2,
                720575940632427603: 2,
                720575940634654489: 2,
                720575940636232116: 2,
                720575940638747482: 2,
                720575940638864256: 1,
                720575940639272765: 3,
                720575940639313990: 2,
                720575940640000464: 3,
                720575940640754304: 2,
                720575940640850304: 1,
                720575940645360919: 2,
                720575940651421686: 2,
                720575940660402561: 1,
                720575940660829057: 1,
            },
            pathways(s, t, isets, osets),
        )

        s = all_rids[200]
        t = all_rids[201]
        self.assertEqual(
            {
                720575940603453286: 0,
                720575940603453542: 4,
                720575940612598499: 2,
                720575940613268195: 1,
                720575940617853986: 1,
                720575940619076918: 2,
                720575940620057626: 2,
                720575940621277790: 2,
                720575940622337635: 3,
                720575940623707575: 1,
                720575940624853031: 1,
                720575940625102224: 2,
                720575940627368250: 1,
                720575940628504919: 2,
                720575940630026812: 2,
                720575940630697979: 1,
                720575940631347011: 1,
                720575940631842360: 2,
                720575940635967886: 2,
                720575940637647950: 1,
                720575940649809273: 2,
                720575940651804918: 2,
            },
            pathways(s, t, isets, osets),
        )

        s = all_rids[300]
        t = all_rids[301]
        self.assertEqual(
            {
                720575940603713248: 0,
                720575940603714272: 4,
                720575940612019683: 3,
                720575940616019899: 1,
                720575940616551029: 2,
                720575940617766966: 3,
                720575940618807454: 2,
                720575940620690804: 1,
                720575940621197061: 3,
                720575940626802770: 1,
                720575940630026812: 2,
                720575940631119468: 3,
            },
            pathways(s, t, isets, osets),
        )
